name: Conan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: deps
        run: |
          sudo apt install libaio-dev libgtest-dev -y
          cd /usr/src/gtest
          sudo mkdir build && cd build
          sudo cmake .. && sudo make
          sudo apt install libgmock-dev -y
      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Conan version
        run: echo "${{ steps.conan.outputs.version }}"

      - name: Generate conan profile
        run: CXX=clang++ CC=clang conan profile detect --name clang_tmp

      - name: Install deps
        run: conan install ${{github.workspace}} -pr:b=clang_tmp -pr=clang_tmp -o header_only=False

      - name: Build
        # Build your program with the given configuration
        run: CXX=clang++ CC=clang conan build ${{github.workspace}} -pr:b=clang_tmp -pr=clang_tmp -o header_only=False

      - name: Test
        working-directory: ${{github.workspace}}/build/${{env.BUILD_TYPE}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
      
